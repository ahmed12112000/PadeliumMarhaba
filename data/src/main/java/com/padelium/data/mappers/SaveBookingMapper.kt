package com.padelium.data.mappers

import com.padelium.data.dto.SaveBookingRequestDTO
import com.padelium.domain.dto.SaveBookingRequest
import javax.inject.Inject


class SaveBookingMapper @Inject constructor(){
/*
    fun SaveBookingRequestToSaveBookingRequestDTO(saveBookingResponse: List<SaveBookingResponse>): List<SaveBookingResponseDTO> {
        return saveBookingResponse.map { response ->
            SaveBookingResponseDTO(
                id = response.id,
                from = response.from,
                to = response.to,
                annulationDate = response.annulationDate,
                sellAmount = response.sellAmount,
                purchaseAmount = response.purchaseAmount,
                numberOfPlayer = response.numberOfPlayer,
                reference = response.reference,
                description = response.description,
                isRefundable = response.isRefundable,
                created = response.created,
                updated = response.updated,
                createdBy = response.createdBy,
                updatedBy = response.updatedBy,
                currencyFromId = response.currencyFromId,
                currencyToId = response.currencyToId,
                bookingStatusId = response.bookingStatusId,
                establishmentId = response.establishmentId,
                userId = response.userId,
                userLogin = response.userLogin,
                establishmentName = response.establishmentName,
                bookingStatusName = response.bookingStatusName,
                userPhone = response.userPhone,
                cancelBook = response.cancelBook,
                cancel = response.cancel,
                isonline = response.isonline,
                activityName = response.activityName,
                cityName = response.cityName,
                establishmentCode = response.establishmentCode,
                localAmount = response.localAmount,
                reduction = response.reduction,
                showcancel = response.showcancel,
                showfeedBack = response.showfeedBack,
                bookingDate = response.bookingDate,
                token = response.token,
                paymentError = response.paymentError,
                paymentprog = response.paymentprog,
                amountToPay = response.amountToPay,
                sobflousCode = response.sobflousCode,
                couponId = response.couponId,
                isCoupon = response.isCoupon,
                couponValue = response.couponValue,
                couponCode = response.couponCode,
                establishmentPacksId = response.establishmentPacksId,
                establishmentTypeCode = response.establishmentTypeCode,
                isConfirmed = response.isConfirmed,

                isFromEvent = response.isFromEvent,
                establishmentPacksFirstTitle = response.establishmentPacksFirstTitle,
                establishmentPacksSecondTitle = response.establishmentPacksSecondTitle,
                usersIds = response.usersIds,
                bookingUsersPaymentListDTO = response.bookingUsersPaymentListDTO,
                fromStr = response.fromStr,
                toStr = response.toStr,
                fromStrTime = response.fromStrTime,
                toStrTime = response.toStrTime,
                activePayment = response.activePayment,
                isWaitForPay = response.isWaitForPay,
                bookingLabelId = response.bookingLabelId,
                bookingLabelName = response.bookingLabelName,
                bookingLabelColors = response.bookingLabelColors,
                sharedExtrasIds = response.sharedExtrasIds,
                privateExtrasIds = response.privateExtrasIds,
                privateExtrasLocalIds = response.privateExtrasLocalIds,
                userFirstName = response.userFirstName,
                userLastName = response.userLastName,
                extras = response.extras,
                numberOfPart = response.numberOfPart,
                createdStr = response.createdStr,

                )
        }
    }*/
    /*
    fun SaveBookingRequestToSaveBookingRequestDTO(saveBookingRequest: SaveBookingRequest): SaveBookingRequestDTO {
        return SaveBookingRequestDTO(
            aamount = saveBookingRequest.aamount,
            amount = saveBookingRequest.amount,
            amountfeeTrans = saveBookingRequest.amountfeeTrans,
            isClient = saveBookingRequest.isClient,
            currencyId = saveBookingRequest.currencyId,
            currencySymbol = saveBookingRequest.currencySymbol,
            decimalNumber = saveBookingRequest.decimalNumber,
            description = saveBookingRequest.description,
            end = saveBookingRequest.end,
            Establishment = saveBookingRequest.Establishment,
            facadeUrl = saveBookingRequest.facadeUrl,
            mgAmount = saveBookingRequest.mgAmount,
            moyFeed = saveBookingRequest.moyFeed,
            numberOfPart = saveBookingRequest.numberOfPart,
            payFromAvoir = saveBookingRequest.payFromAvoir,
            plannings = saveBookingRequest.plannings,
            reductionSecondAmount = saveBookingRequest.reductionSecondAmount,
            reductionaSecondAmount = saveBookingRequest.reductionaSecondAmount,
            rsamountfeeTrans = saveBookingRequest.rsamountfeeTrans,
            samountfeeTrans = saveBookingRequest.samountfeeTrans,
            searchDate = saveBookingRequest.searchDate,
            secondAamount = saveBookingRequest.secondAamount,
            secondAmount = saveBookingRequest.secondAmount,
            secondReduction = saveBookingRequest.secondReduction,
            start = saveBookingRequest.start,
            closeTime = saveBookingRequest.closeTime,
            to = saveBookingRequest.to,
            from = saveBookingRequest.from,
            totalFeed = saveBookingRequest.totalFeed,
            withSecondPrice = saveBookingRequest.withSecondPrice,
            // usersIds = saveBookingRequest.usersIds,
            // sharedExtrasIds = saveBookingRequest.sharedExtrasIds,
            //  privateExtrasIds = saveBookingRequest.privateExtrasIds,
            HappyHours = saveBookingRequest.HappyHours,
            establishmentPictureDTO = saveBookingRequest.establishmentPictureDTO,
            // establishmentPacksDTO = saveBookingRequest.establishmentPacksDTO,
            // bookingAnnulationDTOSet = saveBookingRequest.bookingAnnulationDTOSet,

        )
    }
*/
/*
    fun SaveBookingResponseToSaveBookingResponseDTO(saveBookingResponse: SaveBookingResponse): SaveBookingResponseDTO {
        return SaveBookingResponseDTO(
            id = saveBookingResponse.id,
            from = saveBookingResponse.from ?: "",
            to = saveBookingResponse.to ?: "",
            annulationDate = saveBookingResponse.annulationDate ?: "",
            sellAmount = saveBookingResponse.sellAmount ?: BigDecimal.ZERO,
            purchaseAmount = saveBookingResponse.purchaseAmount ?: BigDecimal.ZERO,
            numberOfPlayer = saveBookingResponse.numberOfPlayer ?: 0,
            reference = saveBookingResponse.reference?: "",
            description = saveBookingResponse.description ?: "",
            isRefundable = saveBookingResponse.isRefundable ?: false,
            created = saveBookingResponse.created ?: "",
            updated = saveBookingResponse.updated ?: "",
            createdBy = saveBookingResponse.createdBy ?: 0L,
            updatedBy = saveBookingResponse.updatedBy ?: 0L,
            currencyFromId = saveBookingResponse.currencyFromId ?: 0L,
            currencyToId = saveBookingResponse.currencyToId ?: 0L,
            bookingStatusId = saveBookingResponse.bookingStatusId ?: 0L,
            establishmentId = saveBookingResponse.establishmentId,
            userId = saveBookingResponse.usersIds.firstOrNull() ?: 0L,
            userLogin = saveBookingResponse.userLogin,
            establishmentName = saveBookingResponse.establishmentName,
            bookingStatusName = saveBookingResponse.bookingStatusName ?: "",
            userPhone = saveBookingResponse.userPhone,
            cancelBook = saveBookingResponse.cancelBook ?: false,
            cancel = saveBookingResponse.cancel ?: false,
            isonline = saveBookingResponse.isonline ?: false,
            activityName = saveBookingResponse.activityName ?: "",
            cityName = saveBookingResponse.cityName ?: "",
            establishmentCode = saveBookingResponse.establishmentCode ?: "",
            localAmount = saveBookingResponse.localAmount ?: BigDecimal.ZERO,
            reduction = saveBookingResponse.reduction ?: 0,
            showcancel = saveBookingResponse.showcancel ?: false,
            showfeedBack = saveBookingResponse.showfeedBack ?: false,
            bookingDate = saveBookingResponse.bookingDate ?: "",
            token = saveBookingResponse.token ?: "",
            paymentError = saveBookingResponse.paymentError ?: false,
            paymentprog = saveBookingResponse.paymentprog ?: false,
            amountToPay = saveBookingResponse.amountToPay ?: BigDecimal.ZERO,
            sobflousCode = saveBookingResponse.sobflousCode ?: "",
            couponId = saveBookingResponse.couponId ?: 0L,
            isCoupon = saveBookingResponse.isCoupon ?: false,
            couponValue = saveBookingResponse.couponValue ?: "",
            couponCode = saveBookingResponse.couponCode ?: "",
            establishmentPacksId = saveBookingResponse.establishmentPacksId ?: 0L,
            establishmentTypeCode = saveBookingResponse.establishmentTypeCode ?: "",
            isConfirmed = saveBookingResponse.isConfirmed ?: false,
            isFromEvent = saveBookingResponse.isFromEvent ?: false,
            establishmentPacksFirstTitle = saveBookingResponse.establishmentPacksFirstTitle ?: "",
            establishmentPacksSecondTitle = saveBookingResponse.establishmentPacksSecondTitle ?: "",
            usersIds = saveBookingResponse.usersIds ?: emptyList(),
            bookingUsersPaymentListDTO = saveBookingResponse.bookingUsersPaymentListDTO ?: emptyList(),
            fromStr = saveBookingResponse.fromStr ?: "",
            toStr = saveBookingResponse.toStr ?: "",
            fromStrTime = saveBookingResponse.fromStrTime ?: "",
            toStrTime = saveBookingResponse.toStrTime ?: "",
            activePayment = saveBookingResponse.activePayment ?: false,
            isWaitForPay = saveBookingResponse.isWaitForPay ?: false,
            bookingLabelId = saveBookingResponse.bookingLabelId ?: 0L,
            bookingLabelName = saveBookingResponse.bookingLabelName ?: "",
            bookingLabelColors = saveBookingResponse.bookingLabelColors ?: "",
            sharedExtrasIds = saveBookingResponse.sharedExtrasIds ?: emptyList(),
            privateExtrasIds = saveBookingResponse.privateExtrasIds ?: emptyList(),
            privateExtrasLocalIds = saveBookingResponse.privateExtrasLocalIds ?: mutableMapOf(),
            userFirstName = saveBookingResponse.userFirstName ?: "",
            userLastName = saveBookingResponse.userLastName ?: "",
            extras = saveBookingResponse.extras ?: emptyList(),
            numberOfPart = saveBookingResponse.numberOfPart ?: 0,
            createdStr = saveBookingResponse.createdStr ?: ""
        )
    }

*/

}






